#!/usr/bin/env python

import argparse
import sys
import taddle


if __name__ == '__main__':
    '''--------------------------
        Main Arguments 
    --------------------------'''
    parser = argparse.ArgumentParser(
        description=(
           "                                                          ____        \n"
           "`````|`````       .'.       |``````.  |``````.  |        |            \n"
           "     |          .`````.     |       | |       | |        |______      \n"
           "     |        .'       `.   |       | |       | |        |            \n"
           "     |      .'           `. |......'  |......'  |_______ |___________ \n"
                                                                      
        ),
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog='Dont Tell!'
    )
    parser.add_argument(
        '--debug',
        action='store_true',
        default=False,
        help='Drop into ipdb when something bad happens.'
    )
    parser.add_argument(
        '--interactive',
        action='store_true',
        default=False,
        help='Initiate an ipdb session right before exiting.'
    )
    parser.add_argument(
        '--overlook',
        action='store_true',
        default=False,
        help='Skip analysis if files produced by --out exists.'
    )
    subparsers = parser.add_subparsers(
        title='Taddle. A daemon to report IP address changes',
        metavar='',
        description='Use --help with each command for more info',
    )
    # Also allow the help message to be printed using the help command
    helpcmd = subparsers.add_parser('help',help='Prints this help message')

    def watch(args):
        import getpass
        user = input('Gmail User:').strip() 
        password = getpass.getpass('Gmail Password:')
        daemon = taddle.Taddle('schae234@umn.edu',user,password) 
        daemon.run()

    parser.set_defaults(func=watch)

    args = parser.parse_args()
    # Add debug options
    if args.debug is True:
        from IPython.core import ultratb
        sys.excepthook = ultratb.FormattedTB(
            mode='Verbose', color_scheme='Linux', call_pdb=1
        )
    # SKip analyses that already happened (if --overlook is provided)
    if args.overlook is True and len(glob.glob(args.out+'*')):
        print("Skipping {}* because files already exist.".format(args.out))
    else:
        try:
            return_value = args.func(args)
        except AttributeError as e:
            print("No command found. Use --help or help command.")
            sys.exit(1)
        if args.interactive is True:
            from IPython.core import ultratb
            sys.excepthook = ultratb.FormattedTB(
                mode='Verbose', color_scheme='Linux', call_pdb=1
            )
        sys.exit(return_value)

